---
title: Configuring the OpenTelemetry Collector
owner: Logging and Metrics
---

You can deploy an [OpenTelemetry Collector](https://opentelemetry.io/docs/collector/) to Cloud Foundry VMs to egress metrics.

When the OpenTelemetry Collector is deployed the Loggregator Forwarder Agent forwards platform and application metrics
to the OTel Collector which then egresses metrics via one or more metric exporters that you configure.

<p class="note caution">
<span class="note__title"><strong>Caution</strong></span>
OpenTelemetry Collector support is currently an experimental feature.</p>

## <a id='metric-exporter-config'></a> Metric Exporter Configuration

The OTel Collector has a standard YAML-based file format for configuration. When deploying Cloud Foundry with Otel Collector
support you should **only** provide the exporter configuration.

<p class="note important">
<span class="note__title"><strong>Important</strong></span>
You should only specify the configuration under the `exporters` section of the OpenTelemetry Collector configuration. It
is not currently possible to configure Receivers or Processors.</p>

For example, to configure the OpenTelemetry Collector to egress metrics via OTLP over gRPC you could provide the following
minimal configuration. This will use the defaults for gRPC and TLS configuration:

```
otlp:
  endpoint: 203.0.113.10:4317
```

As the OTel Collector is typically deployed as a BOSH add-on you will want to ensure that all VMs in your deployment are
allowed to connect to the OTLP server endpoint.

### <a id='mtls'></a> mTLS

To configure the exporter to do mTLS to the remote OTLP endpoint you can specify [additional TLS
configuration](https://github.com/open-telemetry/opentelemetry-collector/blob/main/config/configtls/README.md):

```
otlp:
  endpoint: 203.0.113.10:4317
  tls:
    cert_pem: |
      PEM_ENCODED_CERTIFICATE
    key_pem: |
      PEM_ENCODED_CERTIFICATE
    ca_pem: |
      PEM_ENCODED_CERTIFICATE
```

### <a id='grpc-compression'></a> gRPC Compression

You can configure the type of compression used for OTLP gRPC exporters. The OTLP gRPC exporter uses `gzip` compression
by default. To reduce CPU usage of the OTel Collector (increasing the size of the payload) you can optionally configure
the OTLP gRPC exporter to use `snappy` compression. You should validate that the server you are sending metrics to
supports snappy compression before making this change:

```
otlp:
  endpoint: 203.0.113.10:4317
  compression: snappy
```

### <a id='multiple-exporters'></a> Multiple Exporters

The OTel Collector supports defining multiple exporters, each with their own configuration. For example you could define
two OTLP gRPC exporters egressing metrics to different destinations:

```
otlp:
  endpoint: 203.0.113.10:4317
otlp/another:
  endpoint: 203.0.113.11:4317
```

### <a id='authentication'></a> Authentication

The Cloud Foundry distribution of the OpenTelemetry Collector does not support configuration of authenticator extensions
for exporters at this time.

### <a id='available-exporters'></a> Reviewing the Available Exporters

The Cloud Foundry distribution of the OpenTelemetry Collector ships with a number of exporters. To see the exporters that are
available for use, run the following command on a VM that has the otel-collector deployed:

```
/var/vcap/packages/otel-collector/otel-collector components
```

Alternatively you can review the [distribution
file](https://github.com/cloudfoundry/loggregator-agent-release/blob/main/src/otel-collector/config.yaml) used to build
the Cloud Foundry distribution of OTel Collector. Please ensure that the tag of the loggregator-agent-release repository
that you are reviewing matches the version of loggregator-agent release that you plan to deploy.

## <a id='deploying'></a> Deploying the OpenTelemetry Collector

CF Deployment provides [experimental operations files](https://github.com/cloudfoundry/cf-deployment/tree/main/operations/experimental)
that you can use to deploy the OTel Collector
[on Linux](https://github.com/cloudfoundry/cf-deployment/blob/main/operations/experimental/add-otel-collector.yml) and
[on Windows](https://github.com/cloudfoundry/cf-deployment/blob/main/operations/experimental/add-otel-collector-windows.yml).

For example to deploy a fresh deployment of CF Deployment with OTel Collector enabled you could run:

```
bosh deploy cf-deployment.yml \
  --ops-file=operations/experimental/add-otel-collector.yml \
  --var-file=otel_collector_metric_exporters=YOUR_METRIC_EXPORTER_CONFIG_FILE_PATH.yml \
  --var=system_domain=YOUR_SYSTEM_DOMAIN
```
